// ðŸŽ“ University Database Schema
// Core structure for student registration and course management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Users - Students, Faculty, and Staff
model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[] @relation("UserEnrollments")
  teaching      Course[]     @relation("CourseInstructor")
}

// Courses - Available Classes
model Course {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  courseCode    String       @unique
  title         String
  description   String
  credits       Int
  capacity      Int
  schedule      Json
  prerequisites String[]
  department    String
  semester      String
  instructorId  String       @db.ObjectId
  instructor    User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments   Enrollment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([instructorId])
}

// Enrollments - Student Course Registrations
model Enrollment {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  courseId  String           @db.ObjectId
  status    EnrollmentStatus @default(PENDING)
  grade     String?
  user      User             @relation("UserEnrollments", fields: [userId], references: [id])
  course    Course           @relation(fields: [courseId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([userId, courseId])
}

// Department - Academic Departments
model Department {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
  STAFF
}

enum EnrollmentStatus {
  PENDING
  ENROLLED
  WAITLISTED
  DROPPED
  COMPLETED
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
